generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  USER
  ADMIN
  TUTOR
}

enum isLiked {
  true
  false
}

enum Visibility {
  public
  private
}

model User {
   id                String  @id @default(cuid())
  name String  @unique
  email String @unique
  password String
  src String?
  courses Course[]
  episodes Episode[]
  students Student[]
  comments Comment[]
  messages Message[]
conversations Conversation[] @relation("UserConversation")
  sentConversations Conversation[] @relation("SenderConversation")
  groups Group[]
  projects Project[]
  posts Post[]
  likes Like[]
  follows Follow[]
  role  Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Course{
 id                String  @id @default(cuid())
  name String
  src String
  userId String
  price  String
  discount String?
  students Student[]
  episodes Episode[]
  user User @relation(fields:[userId],references:[id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id                String  @id @default(cuid())
    userId String
  postId String
  post Post @relation(fields: [postId],references: [id])
   user User @relation(fields:[userId],references:[id])
   isLiked isLiked @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow{
  id                String  @id @default(cuid())
  userId String
  followerId String
   user User @relation(fields:[userId],references:[id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Episode {
   id                String  @id @default(cuid())
  name String
  src String
  courseId String
  userId String
    course Course @relation(fields:[courseId],references:[id])
  user User @relation(fields:[userId],references:[id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
   id                String  @id @default(cuid())
  name String
  courseId String
  src String
  userId String
  course Course @relation(fields:[courseId],references:[id])
  user User @relation(fields:[userId],references:[id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post{
    id                String  @id @default(cuid())
  name String
  src String?
  description String
  userId String
  code  String?
  comments Comment[]
  likes Like[]
  user User @relation(fields:[userId],references:[id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project{
    id                String  @id @default(cuid())
  name String
  src String?
  description String
  userId String
  visibility Visibility @default(public)
  user User @relation(fields:[userId],references:[id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Comment {
    id                String  @id @default(cuid())
   description String
   src String?
  userId String
  postId String
  post Post @relation(fields: [postId],references: [id])
   user User @relation(fields:[userId],references:[id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Message{
     id                String  @id @default(cuid())
   message String
   src String?
  userId String
  conversationId String?
  conversation Conversation? @relation(fields: [conversationId],references: [id])
   user User @relation(fields:[userId],references:[id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group{
  id                String  @id @default(cuid())
  name String
  src String?
  userId String
   user User @relation(fields:[userId],references:[id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation{
    id                String  @id @default(cuid())
     userId String
     senderId String
     messages Message[]
  user User @relation(fields: [userId],references: [id],name: "UserConversation")
   sender User @relation(fields:[senderId],references: [id], name: "SenderConversation")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


